funcprot(0);
//Simple Pendulum
Length = 1;
Mass = 1;
g=9.81;
vp_init=0;
t=0

//system parameters
k=g/Length;
//rk=sqrt(k); //used when undamped
theta_init=0.01;
c=1;

//specific solution parameters 
p=[1 c -k];
r=roots(p);
A=[r(1) r(2);1 1];
B=[0;theta_init];
C=linsolve(A,B);
//motion of the platform

global('data');
data=[0,0,0,0];

// This GUI file is generated by guibuilder version 3.0
//////////
f=figure('figure_position',[400,50],'figure_size',[656,582],'auto_resize','on','background',[33],'figure_name','Graphic window number %d');
//////////
delmenu(f.figure_id,gettext('File'))
delmenu(f.figure_id,gettext('?'))
delmenu(f.figure_id,gettext('Tools'))
toolbar(f.figure_id,'off')
handles.dummy = 0;
handles.motion=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[3],'Min',[-3],'Position',[0.096875,0.0020833,0.803125,0.0979167],'Relief','solid','SliderStep',[0.01,0.1],'String','motion','Style','slider','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','motion','Callback','motion_callback(handles)')


//////////
// Callbacks are defined as below. Please do not delete the comments as it will be used in coming version
//////////

function motion_callback(handles)
//Write your callback for  motion  here
global data;
motion=handles.motion.value;
t=toc();
dt=t-data(1);
vp=(motion-data(2))/dt;
ap=(vp-data(3))/dt;
data=[t,motion,vp,ap];//storing actual time,position,velocity,acceleration
disp(ap);

endfunction

da=gda();
    da.data_bounds=[-3*Length,-Length-1;3*Length,Length+1];

a=newaxes(f)
    a.auto_clear="on";
//    a.data_bounds=[-2*Length+motion,-Length-1;2*Length+motion,Length+1];
    a.tight_limits="on";
    a.x_location="bottom";
    a.y_location="left";
    a.axes_visible="on";
    a.auto_clear = "on"
    a.box="off";
    a.grid=[2,2];
    a.grid_style=[9,9]
    a.grid_thickness=[1,1];
    a.auto_scale = "off";
    a.isoview = "on";
    a.margins = [0.125,0.125,0.125,0.15]
    
    
tic()
t1=0;
//axes resets every time it enters the loop
//------------------------------------------------------------------
while t<10 //run time of the simulation

//^^^^^^Do not disturb^^^^^^
//    a=gca();                //to reduce blinking//due to resetting
    a.auto_clear = 'on'     //to clear the graph after calc(time consuming)
//^^^^^^^^^^^^^^^^^^^^^^^^^^
    t=toc();

//Equation comes here
        //angle as a function of time
        theta_im = C(1)*exp(r(1)*t)+C(2)*exp(r(2)*t);  //for damped systems    
        //theta=theta_init/2*(exp(rk*t)+exp(-rk*t));  //for undamped system
        theta= real(theta_im);

//Getting coordinates of points
        lx=Length*cos(theta+(%pi/2))+data(2);
        ly=Length*sin(theta+(%pi/2));
    
//Plotting starts here
    xpoly([0,0],[0,0]);//in order to erase the previous plot(autoclear)
    drawlater();
    a.auto_clear = 'off'//hold on
    //+++++++++Add here+++++++++++
    //dont use 'plot' anywhere as it tries to rescale the axis
    
    //----------------------------
    xpoly([data(2),lx],[0,ly]);
    xpoly([lx,lx],[ly,ly]);//coincident line:bob
    bob=gce();
    bob.mark_style=9;
    bob.mark_size=5;//max size--use rad for larger size
    //rad=0.1;
    //rad=rad*2;
    //xarc(lx-rad/2,ly+rad/2,rad,rad,0,360*64);
    ////xfarc(lx-rad/2,ly+rad/2,rad,rad,0,360*64);
    

    drawnow();
        if theta>%pi/2|theta<-1*%pi/2 then
            break
        end;
        prev_time=t;
    sleep(20)
end

