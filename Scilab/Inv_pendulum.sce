funcprot(0);
global pid exit_flag Length colour theta_init erase_plot;
pid=[10,100,5];
exit_flag=0;
Length = 10;
colour=1;
data=[0,0,0,0];
theta_init=-0.1;
erase_plot=1;



function main()
global('data','pid','c','k','r','C','ks','cs','theta','Length','f','a','rtp','da','stop_flag','exit_flag','colour','handles','theta_init');
Mass = 1;
g=9.81;
vp_init=0;
data=[0,0,0,0];
cs=0;

ks=g/Length;
//ks=-1
c=cs;
k=ks;

stop_flag=0;
//colour=modulo(int(10*rand()),10);

t=0;
theta1=theta_init/2;
theta2=theta_init/2;
theta=theta_init;

    c=(cs+pid(1)/Length)/(1+pid(3)/Length);
    k=(ks-pid(2)/Length)/(1+pid(3)/Length);

    p=[1 c -k];
    r=roots(p);
    A=[r(1) r(2);1 1];
    B=[0;theta_init];
    C=linsolve(A,B);
    


     
tic()
t1=0;
prev_time=0;
prev_theta=0;
thetasum=0;
rtp.auto_clear="off";
//rtp.axes_visible="on";
rtp.x_location="origin";
//axes resets every time it enters the loop
//------------------------------------------------------------------
while stop_flag==0 //run time of the simulation

//^^^^^^Do not disturb^^^^^^
//    a=gca();                //to reduce blinking//due to resetting
    //sca(a);
    //a.auto_clear = 'on'     //to clear the graph after calc(time consuming)
//^^^^^^^^^^^^^^^^^^^^^^^^^^
    t=toc();
    dt=t-prev_time;
    prev_time=t;
    prev_theta=theta;

//Equation comes here
        //angle as a function of time
        //theta_comp = C(1)*exp(r(1)*dt)+C(2)*exp(r(2)*dt);  //for damped systems
        //theta_dt = C(1)*exp(r(1)*t)+C(2)*exp(r(2)*t);
        //theta=theta_init/2*(exp(rk*t)+exp(-rk*t));  //for undamped system
        //theta_comp= real(theta_im);
        theta1=theta1*exp(r(1)*dt)+data(4)*C(1)/Length*dt;
        theta2=theta2*exp(r(2)*dt)+data(4)*C(2)/Length*dt;
        theta=real(theta1+theta2);

//Getting coordinates of points
        lx=Length*cos(real(theta)+(%pi/2))+data(2);
        ly=Length*sin(real(theta)+(%pi/2));
        
//Controller
        thetasum=thetasum+theta*dt;
        if dt then
            dtheta=(theta-prev_theta)/dt;
        //vp=-1*((pid(1)*theta)+(pid(2)*thetasum)+(pid(3)*dtheta));
        //data(4)=(vp-data(3))/(Length*dt);
        
        //data(3)=vp;
        //data(2)=data(2)+vp*dt;
        data(2)=real(-1*(theta1*(pid(3)+pid(1)/r(1)+pid(2)/((r(1))^2))+theta2*(pid(3)+pid(1)/r(2)+pid(2)/((r(2))^2))))
        handles.motion.value=data(2);
        end
    
//Plotting starts here
drawlater();
    sca(a);
    a.auto_clear = 'on'
    xpoly([0,0],[0,0]);//in order to erase the previous plot(autoclear)
    a.auto_clear = 'off'//hold on
    //+++++++++Add here+++++++++++
    //dont use 'plot' anywhere as it tries to rescale the axis
    
    //----------------------------
    xpoly([data(2),lx],[0,ly]);
    xpoly([lx,lx],[ly,ly]);//coincident line:bob
    bob=gce();
    bob.mark_style=9;
    bob.mark_size=5;//max size--use rad for larger size
    //rad=0.1;
    //rad=rad*2;
    //xarc(lx-rad/2,ly+rad/2,rad,rad,0,360*64);
    ////xfarc(lx-rad/2,ly+rad/2,rad,rad,0,360*64);
    
    //plot the graph
    sca(rtp)
    //plot(t,theta,'b.');
    xpoly([t-dt,t],[prev_theta,theta]);
    seg=gce();
    seg.foreground=modulo(colour,10)
    if t-dt then
       datatipRemove(segt);
    end
    segt=datatipCreate(seg,2);
    //datatipSetOrientation(segt,"lower left");

    //plot(t,vp,'b.');
drawnow();
        if theta>%pi/2|theta<-1*%pi/2 then
            break
        end;
        prev_time=t;
                //theta=theta*exp(dt)+(data(4)/Length)*theta_comp*dt;
    //sleep(20)
end

while exit_flag==0
    
end
    close(f);
endfunction




function calc_init()
    global pid c k C r ks cs theta Length;
    c=(cs+pid(1)/Length)/(1+pid(3)/Length);
    k=(ks-pid(2)/Length)/(1+pid(3)/Length);

    p=[1 c -k];
    r=roots(p);
    A=[r(1) r(2);1 1];
    B=[0;theta];
    C=linsolve(A,B);
endfunction

global f a rtp da data pid Length handles;

// This GUI file is generated by guibuilder version 3.0
//////////
f=figure('figure_position',[-8,-8],'figure_size',[1382,744],'auto_resize','on','background',[8],'figure_name','Graphic window number %d');
//////////
delmenu(f.figure_id,gettext('File'))
delmenu(f.figure_id,gettext('?'))
delmenu(f.figure_id,gettext('Tools'))
toolbar(f.figure_id,'off')

da=gda();
    da.data_bounds=[-1*Length,-0.2;1*Length,Length+1];

rtp=newaxes(f)
    rtp.title.text="$\theta\ vs\ Time$";
    rtp.title.font_size = 4;
    rtp.x_label.text="$time$";
    rtp.y_label.text="$\theta$";
    rtp.auto_clear="off";
    rtp.data_bounds=[0,-0.3;2,0.3];
    rtp.x_location="origin";
    rtp.y_location="left";
    rtp.axes_visible="on";
    rtp.box="on";
    rtp.auto_scale = "on";
    rtp.isoview = "off";
    rtp.margins = [0.55,0.05,0.05,0.5]
    rtp.arc_drawing_method = "nurbs";

//subplot(1,2,1)
a=newaxes(f)
    a.data_bounds=[-1*Length,-2;1*Length,Length+1];
    a.x_location="bottom";
    a.axes_visible="on";
    a.auto_clear = "on"
    a.box="off";
    a.grid=[2,2];
    a.grid_style=[9,9]
    a.grid_thickness=[1,1];
    a.auto_scale = "off";
    a.isoview = "on";
    a.margins = [0.02,0.5,0.2,0.2]
    a.arc_drawing_method = "nurbs";
    a.tight_limits=["off","off","off"];

handles.dummy = 0;
handles.theta_init_text=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.375,0.8,0.13,0.05],'Relief','default','SliderStep',[0.01,0.1],'String','$\theta_{initial}=\qquad\ radians$','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','theta_init_text','Callback','')
handles.theta_init=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.425,0.8,0.03,0.05],'Relief','default','SliderStep',[0.01,0.1],'String',string(theta_init),'Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','theta_init','Callback','')
handles.motionl=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.035,0.09,0.03,0.05],'Relief','default','SliderStep',[0.01,0.1],'String','-10','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','off','Tag','motionl','Callback','')
handles.motionh=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.455,0.09,0.03,0.05],'Relief','default','SliderStep',[0.01,0.1],'String','+10','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','off','Tag','motionh','Callback','')
handles.motion=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[evstr(handles.motionh.string)],'Min',[evstr(handles.motionl.string)],'Position',[0.065,0.06,0.39,0.1],'Relief','default','SliderStep',[0.01,0.1],'String','motion','Style','slider','Value',[data(2)],'VerticalAlignment','middle','Visible','on','Tag','motion','Callback','motion_callback(handles)')
handles.kpl=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.61,0.325,0.04,0.05],'Relief','default','SliderStep',[0.01,0.1],'String','-100','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','kpl','Callback','')
handles.kph=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.952,0.325,0.04,0.05],'Relief','default','SliderStep',[0.01,0.1],'String','+100','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','kph','Callback','')
handles.kil=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.61,0.185,0.04,0.05],'Relief','default','SliderStep',[0.01,0.1],'String','-500','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','kil','Callback','')
handles.kih=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.952,0.185,0.04,0.05],'Relief','default','SliderStep',[0.01,0.1],'String','+500','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','kih','Callback','')
handles.kdl=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.61,0.045,0.04,0.05],'Relief','default','SliderStep',[0.01,0.1],'String','-10','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','kdl','Callback','')
handles.kdh=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.952,0.045,0.04,0.05],'Relief','default','SliderStep',[0.01,0.1],'String','+10','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','kdh','Callback','')
handles.kp=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[evstr(handles.kph.string)],'Min',[evstr(handles.kpl.string)],'Position',[0.65,0.3,0.3,0.1],'Relief','raised','SliderStep',[0.01,0.1],'String','kp','Style','slider','Value',[pid(1)],'VerticalAlignment','middle','Visible','on','Tag','kp','Callback','kp_callback(handles)')
handles.ki=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[evstr(handles.kih.string)],'Min',[evstr(handles.kil.string)],'Position',[0.65,0.16,0.3,0.1],'Relief','raised','SliderStep',[0.01,0.1],'String','ki','Style','slider','Value',[pid(2)],'VerticalAlignment','middle','Visible','on','Tag','ki','Callback','ki_callback(handles)')
handles.kd=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[evstr(handles.kdh.string)],'Min',[evstr(handles.kdl.string)],'Position',[0.65,0.02,0.3,0.1],'Relief','raised','SliderStep',[0.01,0.1],'String','kd','Style','slider','Value',[pid(3)],'VerticalAlignment','middle','Visible','on','Tag','kd','Callback','kd_callback(handles)')
handles.reset=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.49,0.15,0.1,0.1],'Relief','raised','SliderStep',[0.01,0.1],'String','$RESET$','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','reset','Callback','reset_callback(handles)')
handles.close=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.49,0.05,0.1,0.1],'Relief','raised','SliderStep',[0.01,0.1],'String','$CLOSE$','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','close','Callback','close_callback(handles)')
handles.stop=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.49,0.25,0.1,0.1],'Relief','raised','SliderStep',[0.01,0.1],'String','$STOP$','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','stop','Callback','stop_callback(handles)')
handles.kptext=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.77,0.38,0.05,0.04],'Relief','default','SliderStep',[0.01,0.1],'String','Kp='+string(pid(1)),'Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','kptext','Callback','')
handles.kitext=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.77,0.24,0.05,0.04],'Relief','default','SliderStep',[0.01,0.1],'String','Ki='+string(pid(2)),'Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','kitext','Callback','')
handles.kdtext=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.77,0.1,0.05,0.04],'Relief','default','SliderStep',[0.01,0.1],'String','Kd='+string(pid(3)),'Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','kdtext','Callback','')
handles.pidtext=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[16],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.775,0.42,0.04,0.04],'Relief','default','SliderStep',[0.01,0.1],'String','$PID$','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pidtext','Callback','')
handles.titletext=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[25],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.13,0.86,0.25,0.08],'Relief','default','SliderStep',[0.01,0.1],'String','$Inverted\ Pendulum$','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','titletext','Callback','')
handles.erase=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.891,0.95,0.06,0.04],'Relief','default','SliderStep',[0.01,0.1],'String','Erase plot','Style','checkbox','Value',[erase_plot],'VerticalAlignment','middle','Visible','on','Tag','erase','Callback','erase_callback(handles)')


//////////
// Callbacks are defined as below. Please do not delete the comments as it will be used in coming version
//////////

function kp_callback(handles)
//Write your callback for  kp  here
global pid;
pid(1)=handles.kp.value
handles.kptext.string="Kp="+string(pid(1))
calc_init();
endfunction


function ki_callback(handles)
//Write your callback for  ki  here
global pid;
pid(2)=handles.ki.value
handles.kitext.string="Ki="+string(pid(2))
calc_init();
endfunction


function kd_callback(handles)
//Write your callback for  kd  here
global pid;
pid(3)=handles.kd.value
handles.kdtext.string="Kd="+string(pid(3))
calc_init();
endfunction



function motion_callback(handles)
//Write your callback for  motion  here
global data;
motion=handles.motion.value;
t=toc();
dt=t-data(1);
if dt then
    vp=(motion-data(2))/dt;
    ap=(vp-data(3))/dt;
    //if abs(ap)<50 then
        //ap=data(4)
    //end
    data=[t,motion,vp,ap];//storing actual time,position,velocity,acceleration 
    //end
    disp(ap);
end
endfunction

function erase_callback(handles)
//Write your callback for  erase  here
global erase_plot;
erase_plot=handles.erase.value;
endfunction

function reset_callback(handles)
//Write your callback for  reset  here
global rtp colour handles pid da Length a theta_init erase_plot;
if erase_plot==1 then
    sca(rtp);
    rtp.auto_clear="on";
    plot(0,0);
else
    colour=colour+1;
end 
    rtp.title.text="$\theta\ vs\ Time$";
    rtp.title.font_size = 4;
    rtp.x_label.text="$time$";
    rtp.y_label.text="$\theta$";
    rtp.data_bounds=[0,-0.3;2,0.3];
//mprintf("Loop %d \n",colour);
theta_init=evstr(handles.theta_init.string)
handles.kp.max=evstr(handles.kph.string)
handles.kp.min=evstr(handles.kpl.string)
handles.ki.max=evstr(handles.kih.string)
handles.ki.min=evstr(handles.kil.string)
handles.kd.max=evstr(handles.kdh.string)
handles.kd.min=evstr(handles.kdl.string)
handles.kp.value=pid(1);
handles.ki.value=pid(2);
handles.kd.value=pid(3);
handles.motion.max=evstr(handles.motionh.string)
handles.motion.min=evstr(handles.motionl.string)
//a.auto_scale="on";
//da.data_bounds=[evstr(handles.motionl.string),-0.2;evstr(handles.motionh.string),Length+1];
//a.auto_scale="off";
//handles.motion.value=data(2);
main();
abort;
endfunction

function close_callback(handles)
//Write your callback for  close  here
global exit_flag stop_flag;
stop_flag=1;
exit_flag=1;
endfunction

function stop_callback(handles)
//Write your callback for  stop  here
global stop_flag
stop_flag=1;
endfunction



main()
